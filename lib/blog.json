{
  "description" : "A simple facial match example with node.js and OpenCV",
  "content" : "<p>OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library. OpenCV was built to provide a common infrastructure for computer vision applications and to accelerate the use of machine perception in the commercial products.</p>\r\n<p>In this example, we'll compare a picture from our webcam with a picture saved on our computer and log the dissimilarities to the console.</p>\r\n<p>To be able to do this, we'll need ot download OpenCV for our computer.</p>\r\n<p>Note: As at the time of this tutorial(October 18, 2017), node js isn't fully compatible with opencv 3. We will use version 2.4.xx</p>\r\n<h2>Installing <code>OpenCV</code> on Mac.</h2>\r\n<pre class=\"language-bash\"><code>brew tap homebrew/science\r\nbrew install opencv@2</code></pre>\r\n<h2>Installing <code>OpenCV</code> on Linux</h2>\r\n<pre class=\"language-bash\"><code>sudo apt-get install build-essential\r\nsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev\r\nsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev\r\n</code></pre>\r\n<p>.Now we can run the following command to install opencv on linux</p>\r\n<pre class=\"language-bash\"><code>sudo apt-get install libopencv-dev</code></pre>\r\n<h2>Installing <code>OpenCV</code> on Windows.</h2>\r\n<p>Please refer to this article&nbsp;<a title=\"OpenCV Install Guide for Windows\" href=\"https://docs.opencv.org/3.2.0/d5/de5/tutorial_py_setup_in_windows.html\" target=\"_blank\" rel=\"noopener\">Open Cv Install Guide for Windows</a></p>\r\n<h2>Project</h2>\r\n<pre class=\"language-bash\"><code>npm init -y</code></pre>\r\n<p>Now let's install the opencv npm module.</p>\r\n<pre class=\"language-bash\"><code>npm install --save opencv</code></pre>\r\n<p>let's look at a simple example on reading images first.</p>\r\n<p>Here's an image we would like to read</p>\r\n<p><img src=\"https://github.com/Kowus/node-opencv-face-detect/raw/master/all-smiles.JPG\" alt=\"Example image\" width=\"100%\" height=\"100%\" /></p>\r\n<h3>Steps</h3>\r\n<ul>\r\n<li>We will first read the file</li>\r\n<li>Then ask the OpenCV library to detect faces</li>\r\n<li>Create a copy of the file with faces circled.</li>\r\n</ul>\r\n<p><code>detect-faces.js</code></p>\r\n<pre class=\"language-javascript\"><code>// Require OpenCV node module\r\nvar cv = require('opencv');\r\n\r\n// create a function to read images\r\nfunction readImg(obj) {\r\n    // invoke readImage method\r\n    cv.readImage(obj, function (err, im) {\r\n        if (err) throw err;\r\n\r\n        // Ensure image has been read/object is an actual image\r\n        if (im.width() &lt; 1 || im.height() &lt; 1) throw new Error('Image has no size');\r\n        \r\n        // detect faces and push into array called faces(passed as an argument in\r\n        // the callback\r\n        im.detectObject(cv.FACE_CASCADE, {}, function (err, faces) {\r\n            if (err) throw err;\r\n\r\n            for (var i = 0; i &lt; faces.length; i++) {\r\n                var face = faces[i];\r\n                // use the ellipse method to draw circle\r\n                im.ellipse(face.x + face.width / 2, face.y + face.height / 2, face.width / 2, face.height / 2);\r\n            }\r\n            // save image under new name\r\n            var newObj = `faces-${obj}`;\r\n            im.save(newObj);\r\n            console.log('Image saved as '+newObj);\r\n        });\r\n    });\r\n}\r\n\r\nreadImg('all-smiles.JPG');</code></pre>\r\n<p>this is how the image will look after the detection algorithm runs</p>\r\n<p><img src=\"https://github.com/Kowus/node-opencv-face-detect/raw/master/faces-all-smiles.JPG\" alt=\"After detection\" width=\"100%\" height=\"100%\" /></p>\r\n<p>Now, let's look at the steps we'll take to compare two images</p>\r\n<ol>\r\n<li>Snap picture if face is detected in webcam</li>\r\n<li>Compare the picture with the image of a saved face</li>\r\n<li>Run dissimilarity algorithm</li>\r\n<li>Log the dissimilarity as a percentage</li>\r\n</ol>\r\n<pre class=\"language-javascript\"><code>var cv = require('opencv');\r\ntry {\r\n  var vid = new cv.VideoCapture(0);\r\n\r\n  // read video being captured\r\n  vid.read(function(err, im){\r\n    if (err) throw err;\r\n    // check for file\r\n    if (im.size()[0] &gt; 0 &amp;&amp; im.size()[1] &gt; 0){\r\n      \r\n      // detect faces\r\n      im.detectObject(cv.FACE_CASCADE, {}, function(err, faces){\r\n        if (err) throw err;\r\n        if (!faces.length) return console.log(\"No Faces\");\r\n\r\n        // get just the first face\r\n        var face = faces[0];\r\n        var ims = im.size();\r\n        var im2 = im.roi(face.x, face.y, face.width, face.height)\r\n        \r\n        // best to use a picture of a face, just a face for accuracy\r\n        cv.readImage('./all-smiles.JPG', function(err, me){\r\n          if(err) throw err;\r\n          \r\n          // Detect faces from the picture, it should return an array\r\n          me.detectObject(cv.FACE_CASCADE, {}, function(err, my_faces){\r\n            if (err) throw err;\r\n            if (!my_faces.length) return console.log(\"No Faces\");\r\n\r\n            // get the first face in the array (which happens to not be me)\r\n            var myface = my_faces[0];\r\n\r\n            // get only the face you want to\r\n            // compare with by resizing the picture\r\n            // to new dimension relative to the position\r\n            // of said face in the picture\r\n            var face_only = me.roi(myface.x, myface.y, myface.width, myface.height);\r\n\r\n            // check dissimilarity\r\n            cv.ImageSimilarity(face_only, im2, function(err, dissimilarity){\r\n              if(err) throw err;\r\n              console.log(`Dissimilarity:  ${dissimilarity}%`);\r\n            });\r\n            // you can save the two images being compared ðŸ˜‰\r\n            face_only.save('my-face-1.jpg');\r\n            im2.save('./take-face-pics-1.jpg')\r\n          });\r\n        });\r\n     });\r\n    } else {\r\n      // camera couldn't start\r\n      console.log(\"Camera didn't return image\")\r\n    }\r\n  });\r\n} catch (e){\r\n  // handle error\r\n  console.log(\"Couldn't start camera\", e)\r\n}</code></pre>\r\n<p>The terminal output will look like this</p>\r\n<pre class=\"language-bash\"><code>Dissimilarity:  60.6%</code></pre>\r\n<p>If you would rather want to see the similarity instead, change the following line in your code from</p>\r\n<pre class=\"language-javascript\"><code>console.log(`Dissimilarity:  ${dissimilarity}%`);</code></pre>\r\n<p>to</p>\r\n<pre class=\"language-javascript\"><code>console.log(`Similarity:  ${100 - dissimilarity}%`);</code></pre>\r\n<p>That's it! Very easy, you can check out the code repo on <a title=\"Github\" href=\"https://github.com/Kowus/node-opencv-face-detect.git\" target=\"_blank\" rel=\"noopener\">Github</a>&nbsp;or <a title=\"Download project repository\" href=\"https://github.com/Kowus/node-opencv-face-detect/archive/master.zip\">Click here to download</a></p>\r\n<p>&nbsp;</p>",
  "permalink" : "node_js_open_cv_face_match",
  "title" : "Node Js OpenCV Face Match",
  "publish" : true,
  "author" : "Barnabas Nomo",
  "date" : "2017-10-18T03:35:20.259Z",
  "__v" : 0,
  "categories" : [
    "OpenCV",
    "nodejs",
    "detection",
    "dissimilarity",
    "recognition",
    "match"
  ]

}